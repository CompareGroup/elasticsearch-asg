// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import esasg "github.com/mintel/elasticsearch-asg"
import mock "github.com/stretchr/testify/mock"

// ElasticsearchQueryService is an autogenerated mock type for the ElasticsearchQueryService type
type ElasticsearchQueryService struct {
	mock.Mock
}

// Node provides a mock function with given fields: ctx, name
func (_m *ElasticsearchQueryService) Node(ctx context.Context, name string) (*esasg.Node, error) {
	ret := _m.Called(ctx, name)

	var r0 *esasg.Node
	if rf, ok := ret.Get(0).(func(context.Context, string) *esasg.Node); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*esasg.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Nodes provides a mock function with given fields: ctx, names
func (_m *ElasticsearchQueryService) Nodes(ctx context.Context, names ...string) (map[string]*esasg.Node, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[string]*esasg.Node
	if rf, ok := ret.Get(0).(func(context.Context, ...string) map[string]*esasg.Node); ok {
		r0 = rf(ctx, names...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*esasg.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
